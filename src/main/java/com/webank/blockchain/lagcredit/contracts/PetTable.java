package com.webank.blockchain.lagcredit.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class PetTable extends Contract {
    public static final String BINARY = "60806040526103e860005534801561001657600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614c55806100676000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063105bcfbe146100a95780632cff89c9146100e657806351635c4414610123578063735eabc11461016057806380599e4b1461019d578063857cb0eb146101da578063b02a27561461020b578063d57d454014610236578063efc81a8c1461025f578063fcd7e3c11461028a575b600080fd5b3480156100b557600080fd5b506100d060048036036100cb9190810190613db5565b6102cd565b6040516100dd91906145f4565b60405180910390f35b3480156100f257600080fd5b5061010d60048036036101089190810190613d61565b610a2e565b60405161011a91906145f4565b60405180910390f35b34801561012f57600080fd5b5061014a60048036036101459190810190613cdf565b610cf8565b60405161015791906145d9565b60405180910390f35b34801561016c57600080fd5b5061018760048036036101829190810190613ecb565b611052565b60405161019491906145f4565b60405180910390f35b3480156101a957600080fd5b506101c460048036036101bf9190810190613cdf565b611881565b6040516101d191906145f4565b60405180910390f35b3480156101e657600080fd5b506101ef611b9f565b6040516102029796959493929190614539565b60405180910390f35b34801561021757600080fd5b50610220612725565b60405161022d9190614517565b60405180910390f35b34801561024257600080fd5b5061025d60048036036102589190810190613cdf565b61280e565b005b34801561026b57600080fd5b50610274612850565b60405161028191906145f4565b60405180910390f35b34801561029657600080fd5b506102b160048036036102ac9190810190613cdf565b612997565b6040516102c49796959493929190614539565b60405180910390f35b6000806000806060600061100194508473ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161032f906149a0565b602060405180830381600087803b15801561034957600080fd5b505af115801561035d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103819190810190613c8d565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061041f9190810190613c64565b9250610439600080815480929190600101919050556138a1565b91508273ffffffffffffffffffffffffffffffffffffffff1663e942b516836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161049091906148e1565b600060405180830381600087803b1580156104aa57600080fd5b505af11580156104be573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168e6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161051791906147bb565b600060405180830381600087803b15801561053157600080fd5b505af1158015610545573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161059e919061496b565b600060405180830381600087803b1580156105b857600080fd5b505af11580156105cc573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106259190614810565b600060405180830381600087803b15801561063f57600080fd5b505af1158015610653573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106ac9190614766565b600060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610733919061488c565b600060405180830381600087803b15801561074d57600080fd5b505af1158015610761573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107ba9190614916565b600060405180830381600087803b1580156107d457600080fd5b505af11580156107e8573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba74886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610841919061483e565b600060405180830381600087803b15801561085b57600080fd5b505af115801561086f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663a815ff15336040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108c89190614718565b600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166331afac3683856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161095192919061465a565b602060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109a39190810190613cb6565b90507fc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce816040516109d491906145f4565b60405180910390a16001829080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610a199291906139f8565b50508095505050505050979650505050505050565b600080600080600061100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a8e906149a0565b602060405180830381600087803b158015610aa857600080fd5b505af1158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ae09190810190613c8d565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b7e9190810190613c12565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bd591906148e1565b600060405180830381600087803b158015610bef57600080fd5b505af1158015610c03573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18888856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c609392919061468a565b602060405180830381600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cb29190810190613cb6565b90507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a81604051610ce391906145f4565b60405180910390a18094505050505092915050565b600080600080600061100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d58906149a0565b602060405180830381600087803b158015610d7257600080fd5b505af1158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610daa9190810190613c8d565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e1057600080fd5b505af1158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e489190810190613c12565b91508273ffffffffffffffffffffffffffffffffffffffff1663e8434e3987846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ea192919061462a565b602060405180830381600087803b158015610ebb57600080fd5b505af1158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ef39190810190613c3b565b905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f5b57600080fd5b505af1158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f939190810190613cb6565b1315611048578073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fef919061460f565b602060405180830381600087803b15801561100957600080fd5b505af115801561101d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110419190810190613c64565b9450611049565b5b50505050919050565b60008060008060008061100194508473ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110b3906149a0565b602060405180830381600087803b1580156110cd57600080fd5b505af11580156110e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111059190810190613c8d565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561116b57600080fd5b505af115801561117f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111a39190810190613c64565b92508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168f6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111fa91906148e1565b600060405180830381600087803b15801561121457600080fd5b505af1158015611228573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168e6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161128191906147bb565b600060405180830381600087803b15801561129b57600080fd5b505af11580156112af573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611308919061496b565b600060405180830381600087803b15801561132257600080fd5b505af1158015611336573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748c6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161138f9190614810565b600060405180830381600087803b1580156113a957600080fd5b505af11580156113bd573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114169190614766565b600060405180830381600087803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161149d919061488c565b600060405180830381600087803b1580156114b757600080fd5b505af11580156114cb573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115249190614916565b600060405180830381600087803b15801561153e57600080fd5b505af1158015611552573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba74886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115ab919061483e565b600060405180830381600087803b1580156115c557600080fd5b505af11580156115d9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663a815ff15336040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116329190614718565b600060405180830381600087803b15801561164c57600080fd5b505af1158015611660573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116c857600080fd5b505af11580156116dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117009190810190613c12565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18f6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161175791906148e1565b600060405180830381600087803b15801561177157600080fd5b505af1158015611785573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18f85856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117e29392919061468a565b602060405180830381600087803b1580156117fc57600080fd5b505af1158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118349190810190613cb6565b90507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a8160405161186591906145f4565b60405180910390a1809550505050505098975050505050505050565b60008060008060003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611b965761100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611937906149a0565b602060405180830381600087803b15801561195157600080fd5b505af1158015611965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119899190810190613c8d565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119ef57600080fd5b505af1158015611a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a279190810190613c12565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a7e91906148e1565b600060405180830381600087803b158015611a9857600080fd5b505af1158015611aac573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166328bb211787846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b0792919061462a565b602060405180830381600087803b158015611b2157600080fd5b505af1158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b599190810190613cb6565b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc315735811281604051611b8a91906145f4565b60405180910390a18094505b50505050919050565b6060806060806060806060600080600080606060008061100196508673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c0d906149a0565b602060405180830381600087803b158015611c2757600080fd5b505af1158015611c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c5f9190810190613c8d565b95508573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611cc557600080fd5b505af1158015611cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611cfd9190810190613c12565b9450600180549050604051908082528060200260200182016040528015611d3857816020015b6060815260200190600190039081611d235790505b509d50600180549050604051908082528060200260200182016040528015611d7457816020015b6060815260200190600190039081611d5f5790505b509c50600180549050604051908082528060200260200182016040528015611db057816020015b6060815260200190600190039081611d9b5790505b509b50600180549050604051908082528060200260200182016040528015611de75781602001602082028038833980820191505090505b509a50600180549050604051908082528060200260200182016040528015611e2357816020015b6060815260200190600190039081611e0e5790505b509950600180549050604051908082528060200260200182016040528015611e5f57816020015b6060815260200190600190039081611e4a5790505b509850600180549050604051908082528060200260200182016040528015611e965781602001602082028038833980820191505090505b509750600093505b60018054905084101561271557600184815481101515611eba57fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f585780601f10611f2d57610100808354040283529160200191611f58565b820191906000526020600020905b815481529060010190602001808311611f3b57829003601f168201915b50505050509250600083511415611f6e5761270a565b8573ffffffffffffffffffffffffffffffffffffffff1663e8434e39600186815481101515611f9957fe5b90600052602060002001876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611fdd9291906146c8565b602060405180830381600087803b158015611ff757600080fd5b505af115801561200b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061202f9190810190613c3b565b915060008273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561209757600080fd5b505af11580156120ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120cf9190810190613cb6565b1315612709578173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161212b919061460f565b602060405180830381600087803b15801561214557600080fd5b505af1158015612159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061217d9190810190613c64565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121d2906148c1565b600060405180830381600087803b1580156121ec57600080fd5b505af1158015612200573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506122299190810190613d20565b8e8581518110151561223757fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122979061479b565b600060405180830381600087803b1580156122b157600080fd5b505af11580156122c5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506122ee9190810190613d20565b8d858151811015156122fc57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161235c9061494b565b600060405180830381600087803b15801561237657600080fd5b505af115801561238a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506123b39190810190613d20565b8c858151811015156123c157fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612421906147f0565b602060405180830381600087803b15801561243b57600080fd5b505af115801561244f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124739190810190613cb6565b8b8581518110151561248157fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124e290614746565b600060405180830381600087803b1580156124fc57600080fd5b505af1158015612510573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506125399190810190613d20565b8a8581518110151561254757fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125a79061486c565b600060405180830381600087803b1580156125c157600080fd5b505af11580156125d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506125fe9190810190613d20565b898581518110151561260c57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663bf40fac16040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161266c906146f8565b602060405180830381600087803b15801561268657600080fd5b505af115801561269a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126be9190810190613be9565b88858151811015156126cc57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b5b836001019350611e9e565b5050505050505090919293949596565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015612805578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127f15780601f106127c6576101008083540402835291602001916127f1565b820191906000526020600020905b8154815290600101906020018083116127d457829003601f168201915b505050505081526020019060010190612749565b50505050905090565b600181908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061284b9291906139f8565b505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156129925761100191508173ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612903906149c0565b602060405180830381600087803b15801561291d57600080fd5b505af1158015612931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129559190810190613cb6565b90507fb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf2108160405161298691906145f4565b60405180910390a18092505b505090565b60608060608060608060606000806000806000803373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156138905761100195508573ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a59906149a0565b602060405180830381600087803b158015612a7357600080fd5b505af1158015612a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612aab9190810190613c8d565b94508473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612b1157600080fd5b505af1158015612b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b499190810190613c12565b93508473ffffffffffffffffffffffffffffffffffffffff1663e8434e398f866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ba292919061462a565b602060405180830381600087803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bf49190810190613c3b565b92508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612c5a57600080fd5b505af1158015612c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c929190810190613cb6565b604051908082528060200260200182016040528015612cc557816020015b6060815260200190600190039081612cb05790505b509c508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612d2c57600080fd5b505af1158015612d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d649190810190613cb6565b604051908082528060200260200182016040528015612d9757816020015b6060815260200190600190039081612d825790505b509b508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612dfe57600080fd5b505af1158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e369190810190613cb6565b604051908082528060200260200182016040528015612e6957816020015b6060815260200190600190039081612e545790505b509a508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612ed057600080fd5b505af1158015612ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f089190810190613cb6565b604051908082528060200260200182016040528015612f365781602001602082028038833980820191505090505b5099508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612f9d57600080fd5b505af1158015612fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612fd59190810190613cb6565b60405190808252806020026020018201604052801561300857816020015b6060815260200190600190039081612ff35790505b5098508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561306f57600080fd5b505af1158015613083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506130a79190810190613cb6565b6040519080825280602002602001820160405280156130da57816020015b60608152602001906001900390816130c55790505b5097508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561314157600080fd5b505af1158015613155573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506131799190810190613cb6565b6040519080825280602002602001820160405280156131a75781602001602082028038833980820191505090505b509650600091505b8273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561321357600080fd5b505af1158015613227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061324b9190810190613cb6565b82121561388f578273ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132a791906145f4565b602060405180830381600087803b1580156132c157600080fd5b505af11580156132d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506132f99190810190613c64565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161334e906148c1565b600060405180830381600087803b15801561336857600080fd5b505af115801561337c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506133a59190810190613d20565b8d838151811015156133b357fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016134139061479b565b600060405180830381600087803b15801561342d57600080fd5b505af1158015613441573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061346a9190810190613d20565b8c8381518110151561347857fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016134d89061494b565b600060405180830381600087803b1580156134f257600080fd5b505af1158015613506573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061352f9190810190613d20565b8b8381518110151561353d57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161359d906147f0565b602060405180830381600087803b1580156135b757600080fd5b505af11580156135cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506135ef9190810190613cb6565b8a838151811015156135fd57fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161365e90614746565b600060405180830381600087803b15801561367857600080fd5b505af115801561368c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506136b59190810190613d20565b89838151811015156136c357fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016137239061486c565b600060405180830381600087803b15801561373d57600080fd5b505af1158015613751573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061377a9190810190613d20565b888381518110151561378857fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663bf40fac16040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016137e8906146f8565b602060405180830381600087803b15801561380257600080fd5b505af1158015613816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061383a9190810190613be9565b878381518110151561384857fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508160010191506131af565b5b505050505050919395979092949650565b606060008060606000808614156138ef576040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525094506139ef565b8593505b600084141515613919578280600101935050600a8481151561391157fe5b0493506138f3565b826040519080825280601f01601f19166020018201604052801561394c5781602001602082028038833980820191505090505b5091506001830390505b6000861415156139eb57600a8681151561396c57fe5b066030017f0100000000000000000000000000000000000000000000000000000000000000028282806001900393508151811015156139a757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a868115156139e357fe5b049550613956565b8194505b50505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613a3957805160ff1916838001178555613a67565b82800160010185558215613a67579182015b82811115613a66578251825591602001919060010190613a4b565b5b509050613a749190613a78565b5090565b613a9a91905b80821115613a96576000816000905550600101613a7e565b5090565b90565b6000613aa98251614b20565b905092915050565b6000613abd8251614b40565b905092915050565b6000613ad18251614b52565b905092915050565b6000613ae58235614b64565b905092915050565b6000613af98251614b64565b905092915050565b6000613b0d8251614b76565b905092915050565b6000613b218235614b88565b905092915050565b6000613b358251614b88565b905092915050565b600082601f8301121515613b5057600080fd5b8135613b63613b5e82614a33565b614a06565b91508082526020830160208301858383011115613b7f57600080fd5b613b8a838284614bc8565b50505092915050565b600082601f8301121515613ba657600080fd5b8151613bb9613bb482614a33565b614a06565b91508082526020830160208301858383011115613bd557600080fd5b613be0838284614bd7565b50505092915050565b600060208284031215613bfb57600080fd5b6000613c0984828501613a9d565b91505092915050565b600060208284031215613c2457600080fd5b6000613c3284828501613ab1565b91505092915050565b600060208284031215613c4d57600080fd5b6000613c5b84828501613ac5565b91505092915050565b600060208284031215613c7657600080fd5b6000613c8484828501613aed565b91505092915050565b600060208284031215613c9f57600080fd5b6000613cad84828501613b01565b91505092915050565b600060208284031215613cc857600080fd5b6000613cd684828501613b29565b91505092915050565b600060208284031215613cf157600080fd5b600082013567ffffffffffffffff811115613d0b57600080fd5b613d1784828501613b3d565b91505092915050565b600060208284031215613d3257600080fd5b600082015167ffffffffffffffff811115613d4c57600080fd5b613d5884828501613b93565b91505092915050565b60008060408385031215613d7457600080fd5b600083013567ffffffffffffffff811115613d8e57600080fd5b613d9a85828601613b3d565b9250506020613dab85828601613ad9565b9150509250929050565b600080600080600080600060e0888a031215613dd057600080fd5b600088013567ffffffffffffffff811115613dea57600080fd5b613df68a828b01613b3d565b975050602088013567ffffffffffffffff811115613e1357600080fd5b613e1f8a828b01613b3d565b9650506040613e308a828b01613b15565b955050606088013567ffffffffffffffff811115613e4d57600080fd5b613e598a828b01613b3d565b945050608088013567ffffffffffffffff811115613e7657600080fd5b613e828a828b01613b3d565b93505060a088013567ffffffffffffffff811115613e9f57600080fd5b613eab8a828b01613b3d565b92505060c0613ebc8a828b01613b15565b91505092959891949750929550565b600080600080600080600080610100898b031215613ee857600080fd5b600089013567ffffffffffffffff811115613f0257600080fd5b613f0e8b828c01613b3d565b985050602089013567ffffffffffffffff811115613f2b57600080fd5b613f378b828c01613b3d565b975050604089013567ffffffffffffffff811115613f5457600080fd5b613f608b828c01613b3d565b9650506060613f718b828c01613b15565b955050608089013567ffffffffffffffff811115613f8e57600080fd5b613f9a8b828c01613b3d565b94505060a089013567ffffffffffffffff811115613fb757600080fd5b613fc38b828c01613b3d565b93505060c089013567ffffffffffffffff811115613fe057600080fd5b613fec8b828c01613b3d565b92505060e0613ffd8b828c01613b15565b9150509295985092959890939650565b61401681614af6565b82525050565b600061402782614a98565b80845260208401935061403983614a5f565b60005b8281101561406b5761404f86835161400d565b61405882614acf565b915060208601955060018101905061403c565b50849250505092915050565b600061408282614aa3565b80845260208401935061409483614a6c565b60005b828110156140c6576140aa86835161415e565b6140b382614adc565b9150602086019550600181019050614097565b50849250505092915050565b60006140dd82614aae565b808452602084019350836020820285016140f685614a79565b60005b8481101561412f5783830388526141118383516141b2565b925061411c82614ae9565b91506020880197506001810190506140f9565b508196508694505050505092915050565b61414981614b92565b82525050565b61415881614ba4565b82525050565b61416781614b16565b82525050565b61417681614bb6565b82525050565b600061418782614ac4565b80845261419b816020860160208601614bd7565b6141a481614c0a565b602085010191505092915050565b60006141bd82614ab9565b8084526141d1816020860160208601614bd7565b6141da81614c0a565b602085010191505092915050565b600081546001811660008114614205576001811461422557614266565b607f600283041680865260ff198316602087015260408601935050614266565b6002820480865260208601955061423b85614a86565b60005b8281101561425d5781548189015260018201915060208101905061423e565b80880195505050505b505092915050565b6000600d82527f6f776e65725f61646472657373000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f6465736372697074696f6e0000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f70726963650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f62697274686461790000000000000000000000000000000000000000000000006020830152604082019050919050565b6000604782527f6e616d652c20706574547970652c2062697274686461792c2070726963652c2060208301527f6465736372697074696f6e2c206163746976652c2075726c2c206f776e65725f60408301527f61646472657373000000000000000000000000000000000000000000000000006060830152608082019050919050565b6000600682527f61637469766500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f75726c00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f70657454797065000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f745f7065740000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015261453181846140d2565b905092915050565b600060e0820190508181036000830152614553818a6140d2565b9050818103602083015261456781896140d2565b9050818103604083015261457b81886140d2565b9050818103606083015261458f8187614077565b905081810360808301526145a381866140d2565b905081810360a08301526145b781856140d2565b905081810360c08301526145cb818461401c565b905098975050505050505050565b60006020820190506145ee600083018461414f565b92915050565b6000602082019050614609600083018461415e565b92915050565b6000602082019050614624600083018461416d565b92915050565b60006040820190508181036000830152614644818561417c565b90506146536020830184614140565b9392505050565b60006040820190508181036000830152614674818561417c565b9050614683602083018461414f565b9392505050565b600060608201905081810360008301526146a4818661417c565b90506146b3602083018561414f565b6146c06040830184614140565b949350505050565b600060408201905081810360008301526146e281856141e8565b90506146f16020830184614140565b9392505050565b600060208201905081810360008301526147118161426e565b9050919050565b600060408201905081810360008301526147318161426e565b9050614740602083018461400d565b92915050565b6000602082019050818103600083015261475f816142a5565b9050919050565b6000604082019050818103600083015261477f816142a5565b90508181036020830152614793818461417c565b905092915050565b600060208201905081810360008301526147b4816142dc565b9050919050565b600060408201905081810360008301526147d4816142dc565b905081810360208301526147e8818461417c565b905092915050565b6000602082019050818103600083015261480981614313565b9050919050565b6000604082019050818103600083015261482981614313565b9050614838602083018461415e565b92915050565b600060408201905081810360008301526148578161434a565b9050614866602083018461415e565b92915050565b6000602082019050818103600083015261488581614404565b9050919050565b600060408201905081810360008301526148a581614404565b905081810360208301526148b9818461417c565b905092915050565b600060208201905081810360008301526148da8161443b565b9050919050565b600060408201905081810360008301526148fa8161443b565b9050818103602083015261490e818461417c565b905092915050565b6000604082019050818103600083015261492f81614472565b90508181036020830152614943818461417c565b905092915050565b60006020820190508181036000830152614964816144a9565b9050919050565b60006040820190508181036000830152614984816144a9565b90508181036020830152614998818461417c565b905092915050565b600060208201905081810360008301526149b9816144e0565b9050919050565b600060608201905081810360008301526149d9816144e0565b905081810360208301526149ec8161443b565b905081810360408301526149ff81614381565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715614a2957600080fd5b8060405250919050565b600067ffffffffffffffff821115614a4a57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614b4b82614af6565b9050919050565b6000614b5d82614af6565b9050919050565b6000614b6f82614af6565b9050919050565b6000614b8182614af6565b9050919050565b6000819050919050565b6000614b9d82614af6565b9050919050565b6000614baf82614af6565b9050919050565b6000614bc182614b16565b9050919050565b82818337600083830152505050565b60005b83811015614bf5578082015181840152602081019050614bda565b83811115614c04576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820c0f3705b6309e74b5bbaeca0becd19eab38d1c36499e827fc007e303ad971add6c6578706572696d656e74616cf50037";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"petType\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"active\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"birthday\",\"type\":\"int256\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"entry\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"selectEntry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"petType\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"active\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"birthday\",\"type\":\"int256\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selectAll\",\"outputs\":[{\"name\":\"ids\",\"type\":\"string[]\"},{\"name\":\"name_list\",\"type\":\"string[]\"},{\"name\":\"type_list\",\"type\":\"string[]\"},{\"name\":\"price_list\",\"type\":\"int256[]\"},{\"name\":\"description_list\",\"type\":\"string[]\"},{\"name\":\"active_list\",\"type\":\"string[]\"},{\"name\":\"owner_address_list\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIdIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"addIdIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"ids\",\"type\":\"string[]\"},{\"name\":\"name_list\",\"type\":\"string[]\"},{\"name\":\"type_list\",\"type\":\"string[]\"},{\"name\":\"price_list\",\"type\":\"int256[]\"},{\"name\":\"description_list\",\"type\":\"string[]\"},{\"name\":\"active_list\",\"type\":\"string[]\"},{\"name\":\"owner_address_list\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_SELECTENTRY = "selectEntry";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECTALL = "selectAll";

    public static final String FUNC_GETIDINDEX = "getIdIndex";

    public static final String FUNC_ADDIDINDEX = "addIdIndex";

    public static final String FUNC_CREATE = "create";

    public static final String FUNC_SELECT = "select";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected PetTable(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PetTable(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PetTable(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PetTable(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> insert(String name, String petType, BigInteger price, String description, String active, String url, BigInteger birthday) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(petType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(active), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(url), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(birthday)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insert(String name, String petType, BigInteger price, String description, String active, String url, BigInteger birthday, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(petType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(active), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(url), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(birthday)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertSeq(String name, String petType, BigInteger price, String description, String active, String url, BigInteger birthday) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(petType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(active), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(url), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(birthday)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> update(String id, String entry) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(entry)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void update(String id, String entry, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(entry)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String updateSeq(String id, String entry) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(entry)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> selectEntry(String id) {
        final Function function = new Function(FUNC_SELECTENTRY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> update(String id, String name, String petType, BigInteger price, String description, String active, String url, BigInteger birthday) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(petType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(active), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(url), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(birthday)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void update(String id, String name, String petType, BigInteger price, String description, String active, String url, BigInteger birthday, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(petType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(active), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(url), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(birthday)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String updateSeq(String id, String name, String petType, BigInteger price, String description, String active, String url, BigInteger birthday) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(petType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(active), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(url), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(birthday)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> remove(String id) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void remove(String id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String removeSeq(String id) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>> selectAll() {
        final Function function = new Function(FUNC_SELECTALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>>(
                new Callable<Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Int256>) results.get(3).getValue()), 
                                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                                convertToNative((List<Utf8String>) results.get(5).getValue()), 
                                convertToNative((List<Address>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteCall<List> getIdIndex() {
        final Function function = new Function(FUNC_GETIDINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addIdIndex(String id) {
        final Function function = new Function(
                FUNC_ADDIDINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addIdIndex(String id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDIDINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addIdIndexSeq(String id) {
        final Function function = new Function(
                FUNC_ADDIDINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> create() {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void create(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createSeq() {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>> select(String idx) {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>>(
                new Callable<Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Int256>) results.get(3).getValue()), 
                                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                                convertToNative((List<Utf8String>) results.get(5).getValue()), 
                                convertToNative((List<Address>) results.get(6).getValue()));
                    }
                });
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateResultEventResponse> createResultEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateResultEventResponse>() {
            @Override
            public CreateResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATERESULT_EVENT, log);
                CreateResultEventResponse typedResponse = new CreateResultEventResponse();
                typedResponse.log = log;
                typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateResultEventResponse> createResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATERESULT_EVENT));
        return createResultEventFlowable(filter);
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InsertResultEventResponse> insertResultEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, InsertResultEventResponse>() {
            @Override
            public InsertResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INSERTRESULT_EVENT, log);
                InsertResultEventResponse typedResponse = new InsertResultEventResponse();
                typedResponse.log = log;
                typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InsertResultEventResponse> insertResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INSERTRESULT_EVENT));
        return insertResultEventFlowable(filter);
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateResultEventResponse> updateResultEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateResultEventResponse>() {
            @Override
            public UpdateResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATERESULT_EVENT, log);
                UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
                typedResponse.log = log;
                typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateResultEventResponse> updateResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATERESULT_EVENT));
        return updateResultEventFlowable(filter);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RemoveResultEventResponse> removeResultEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, RemoveResultEventResponse>() {
            @Override
            public RemoveResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REMOVERESULT_EVENT, log);
                RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
                typedResponse.log = log;
                typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RemoveResultEventResponse> removeResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REMOVERESULT_EVENT));
        return removeResultEventFlowable(filter);
    }

    @Deprecated
    public static PetTable load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PetTable(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PetTable load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PetTable(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PetTable load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PetTable(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PetTable load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PetTable(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PetTable> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PetTable.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<PetTable> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PetTable.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PetTable> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PetTable.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PetTable> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PetTable.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CreateResultEventResponse {
        public Log log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public Log log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public Log log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public Log log;

        public BigInteger count;
    }
}
