package com.webank.blockchain.lagcredit.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class PetMarket extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604051602080620034ae8339810180604052620000339190810190620000e1565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006002819055506000600481905550506200012d565b6000620000d982516200010d565b905092915050565b600060208284031215620000f457600080fd5b60006200010484828501620000cb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b613371806200013d6000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b4f3f3d146100e057806312065fe01461010957806325ad91ce146101345780634438e0291461014b578063682789a8146101745780638114f9e31461019f578063a7df1ce4146101dc578063b051564f14610205578063b3914e531461022e578063b6db75a01461026b578063c02242e814610296578063c4912a91146102d9578063dd8027db14610304578063eefed3711461032f578063f475409f14610360575b600080fd5b3480156100ec57600080fd5b5061010760048036036101029190810190612744565b61038b565b005b34801561011557600080fd5b5061011e61076c565b60405161012b9190612d88565b60405180910390f35b34801561014057600080fd5b506101496107b3565b005b34801561015757600080fd5b50610172600480360361016d91908101906127c6565b6107fb565b005b34801561018057600080fd5b50610189610bdf565b6040516101969190612d88565b60405180910390f35b3480156101ab57600080fd5b506101c660048036036101c19190810190612708565b610be5565b6040516101d391906130b9565b60405180910390f35b3480156101e857600080fd5b5061020360048036036101fe9190810190612744565b610c67565b005b34801561021157600080fd5b5061022c60048036036102279190810190612744565b610c74565b005b34801561023a57600080fd5b506102556004803603610250919081019061281a565b611055565b6040516102629190612d6d565b60405180910390f35b34801561027757600080fd5b50610280611138565b60405161028d9190612d6d565b60405180910390f35b3480156102a257600080fd5b506102bd60048036036102b89190810190612744565b611198565b6040516102d09796959493929190612e85565b60405180910390f35b3480156102e557600080fd5b506102ee611292565b6040516102fb9190612d88565b60405180910390f35b34801561031057600080fd5b506103196112a9565b6040516103269190612d88565b60405180910390f35b34801561033b57600080fd5b506103446112b3565b6040516103579796959493929190612ccd565b60405180910390f35b34801561036c57600080fd5b50610375611397565b6040516103829190612d88565b60405180910390f35b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351635c44846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104049190612da3565b602060405180830381600087803b15801561041e57600080fd5b505af1158015610432573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061045691908101906126b6565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104ab90613046565b600060405180830381600087803b1580156104c557600080fd5b505af11580156104d9573d6000803e3d6000fd5b505050506104e5611138565b156105ba576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632cff89c984846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610562929190612dc5565b602060405180830381600087803b15801561057c57600080fd5b505af1158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105b491908101906126df565b50610767565b8173ffffffffffffffffffffffffffffffffffffffff1663bf40fac16040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161060d90612f17565b602060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061065f9190810190612547565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561069b57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632cff89c984846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610713929190612dc5565b602060405180830381600087803b15801561072d57600080fd5b505af1158015610741573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061076591908101906126df565b505b505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6103e8600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351635c44856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108749190612da3565b602060405180830381600087803b15801561088e57600080fd5b505af11580156108a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108c691908101906126b6565b91508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161091d9190612fc5565b600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b50505050610957611138565b15610a2c576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632cff89c985846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109d4929190612dc5565b602060405180830381600087803b1580156109ee57600080fd5b505af1158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a2691908101906126df565b50610bd9565b8173ffffffffffffffffffffffffffffffffffffffff1663bf40fac16040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a7f90612f17565b602060405180830381600087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ad19190810190612547565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610b0d57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632cff89c985846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b85929190612dc5565b602060405180830381600087803b158015610b9f57600080fd5b505af1158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bd791908101906126df565b505b50505050565b60025481565b6000806000809150600090505b600380549050811015610c5c5784600382815481101515610c0f57fe5b906000526020600020015412158015610c41575083600382815481101515610c3357fe5b906000526020600020015413155b15610c4f5781806001019250505b8080600101915050610bf2565b819250505092915050565b610c7133826113a1565b50565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351635c44846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ced9190612da3565b602060405180830381600087803b158015610d0757600080fd5b505af1158015610d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d3f91908101906126b6565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d9490613013565b600060405180830381600087803b158015610dae57600080fd5b505af1158015610dc2573d6000803e3d6000fd5b50505050610dce611138565b15610ea3576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632cff89c984846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e4b929190612dc5565b602060405180830381600087803b158015610e6557600080fd5b505af1158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e9d91908101906126df565b50611050565b8173ffffffffffffffffffffffffffffffffffffffff1663bf40fac16040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ef690612f17565b602060405180830381600087803b158015610f1057600080fd5b505af1158015610f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f489190810190612547565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610f8457600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632cff89c984846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ffc929190612dc5565b602060405180830381600087803b15801561101657600080fd5b505af115801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061104e91908101906126df565b505b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663105bcfbe8888888888886040518763ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110d796959493929190612df5565b602060405180830381600087803b1580156110f157600080fd5b505af1158015611105573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061112991908101906126df565b50600190509695505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561119557600190505b90565b606080606060006060806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351635c448a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161121b9190612da3565b602060405180830381600087803b15801561123557600080fd5b505af1158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061126d91908101906126b6565b905061127881611d8c565b975097509750975097509750975050919395979092949650565b60006002546004548115156112a357fe5b05905090565b6000600254905090565b60608060608060608060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663857cb0eb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561134357600080fd5b505af1158015611357573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506113809190810190612570565b965096509650965096509650965090919293949596565b6000600454905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351635c44836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114199190612da3565b602060405180830381600087803b15801561143357600080fd5b505af1158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061146b91908101906126b6565b905060405180807f747275650000000000000000000000000000000000000000000000000000000081525060040190506040518091039020600019168173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114fa90612ff3565b600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506115519190810190612785565b6040518082805190602001908083835b6020831015156115865780518252602082019150602081019050602083039250611561565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415156115c357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161161690612fa5565b602060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061166891908101906126df565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054121515156116b557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663bf40fac16040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161170890612f17565b602060405180830381600087803b15801561172257600080fd5b505af1158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061175a9190810190612547565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561179457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117e790612fa5565b602060405180830381600087803b15801561180157600080fd5b505af1158015611815573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061183991908101906126df565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118d890612fa5565b602060405180830381600087803b1580156118f257600080fd5b505af1158015611906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061192a91908101906126df565b600560008373ffffffffffffffffffffffffffffffffffffffff1663bf40fac16040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161198190612f17565b602060405180830381600087803b15801561199b57600080fd5b505af11580156119af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119d39190810190612547565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a6d90613046565b600060405180830381600087803b158015611a8757600080fd5b505af1158015611a9b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663a815ff15336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611af49190612f37565b600060405180830381600087803b158015611b0e57600080fd5b505af1158015611b22573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632cff89c983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b9e929190612dc5565b602060405180830381600087803b158015611bb857600080fd5b505af1158015611bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bf091908101906126df565b5060026000815480929190600101919050555060038173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c5890612fa5565b602060405180830381600087803b158015611c7257600080fd5b505af1158015611c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611caa91908101906126df565b90806001815401808255809150509060018203906000526020600020016000909192909190915055508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d2690612fa5565b602060405180830381600087803b158015611d4057600080fd5b505af1158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d7891908101906126df565b600460008282540192505081905550505050565b6060806060600060608060006060806060600060608060008e73ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611df790613079565b600060405180830381600087803b158015611e1157600080fd5b505af1158015611e25573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611e4e9190810190612785565b96508e73ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ea390612f85565b600060405180830381600087803b158015611ebd57600080fd5b505af1158015611ed1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611efa9190810190612785565b95508e73ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f4f90613099565b600060405180830381600087803b158015611f6957600080fd5b505af1158015611f7d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611fa69190810190612785565b94508e73ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ffb90612fa5565b602060405180830381600087803b15801561201557600080fd5b505af1158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061204d91908101906126df565b93508e73ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120a290612f65565b600060405180830381600087803b1580156120bc57600080fd5b505af11580156120d0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506120f99190810190612785565b92508e73ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161214e90612ff3565b600060405180830381600087803b15801561216857600080fd5b505af115801561217c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506121a59190810190612785565b91508e73ffffffffffffffffffffffffffffffffffffffff1663bf40fac16040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121fa90612f17565b602060405180830381600087803b15801561221457600080fd5b505af1158015612228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061224c9190810190612547565b9050868686868686869d509d509d509d509d509d509d5050505050505050919395979092949650565b60006122818251613296565b905092915050565b600082601f830112151561229c57600080fd5b81516122af6122aa82613101565b6130d4565b915081818352602084019350602081019050838560208402820111156122d457600080fd5b60005b8381101561230457816122ea8882612275565b8452602084019350602083019250506001810190506122d7565b5050505092915050565b600082601f830112151561232157600080fd5b815161233461232f82613129565b6130d4565b9150818183526020840193506020810190508385602084028201111561235957600080fd5b60005b83811015612389578161236f8882612431565b84526020840193506020830192505060018101905061235c565b5050505092915050565b600082601f83011215156123a657600080fd5b81516123b96123b482613151565b6130d4565b9150818183526020840193506020810190508360005b838110156123ff57815186016123e58882612445565b8452602084019350602083019250506001810190506123cf565b5050505092915050565b600061241582516132b6565b905092915050565b600061242982356132c8565b905092915050565b600061243d82516132c8565b905092915050565b600082601f830112151561245857600080fd5b815161246b61246682613179565b6130d4565b9150808252602083016020830185838301111561248757600080fd5b6124928382846132f3565b50505092915050565b600082601f83011215156124ae57600080fd5b81356124c16124bc826131a5565b6130d4565b915080825260208301602083018583830111156124dd57600080fd5b6124e88382846132e4565b50505092915050565b600082601f830112151561250457600080fd5b8151612517612512826131a5565b6130d4565b9150808252602083016020830185838301111561253357600080fd5b61253e8382846132f3565b50505092915050565b60006020828403121561255957600080fd5b600061256784828501612275565b91505092915050565b600080600080600080600060e0888a03121561258b57600080fd5b600088015167ffffffffffffffff8111156125a557600080fd5b6125b18a828b01612393565b975050602088015167ffffffffffffffff8111156125ce57600080fd5b6125da8a828b01612393565b965050604088015167ffffffffffffffff8111156125f757600080fd5b6126038a828b01612393565b955050606088015167ffffffffffffffff81111561262057600080fd5b61262c8a828b0161230e565b945050608088015167ffffffffffffffff81111561264957600080fd5b6126558a828b01612393565b93505060a088015167ffffffffffffffff81111561267257600080fd5b61267e8a828b01612393565b92505060c088015167ffffffffffffffff81111561269b57600080fd5b6126a78a828b01612289565b91505092959891949750929550565b6000602082840312156126c857600080fd5b60006126d684828501612409565b91505092915050565b6000602082840312156126f157600080fd5b60006126ff84828501612431565b91505092915050565b6000806040838503121561271b57600080fd5b60006127298582860161241d565b925050602061273a8582860161241d565b9150509250929050565b60006020828403121561275657600080fd5b600082013567ffffffffffffffff81111561277057600080fd5b61277c8482850161249b565b91505092915050565b60006020828403121561279757600080fd5b600082015167ffffffffffffffff8111156127b157600080fd5b6127bd848285016124f1565b91505092915050565b600080604083850312156127d957600080fd5b600083013567ffffffffffffffff8111156127f357600080fd5b6127ff8582860161249b565b92505060206128108582860161241d565b9150509250929050565b60008060008060008060c0878903121561283357600080fd5b600087013567ffffffffffffffff81111561284d57600080fd5b61285989828a0161249b565b965050602087013567ffffffffffffffff81111561287657600080fd5b61288289828a0161249b565b955050604061289389828a0161241d565b945050606087013567ffffffffffffffff8111156128b057600080fd5b6128bc89828a0161249b565b935050608087013567ffffffffffffffff8111156128d957600080fd5b6128e589828a0161249b565b92505060a06128f689828a0161241d565b9150509295509295509295565b61290c81613256565b82525050565b600061291d826131f8565b80845260208401935061292f836131d1565b60005b8281101561296157612945868351612903565b61294e8261322f565b9150602086019550600181019050612932565b50849250505092915050565b600061297882613203565b80845260208401935061298a836131de565b60005b828110156129bc576129a0868351612a54565b6129a98261323c565b915060208601955060018101905061298d565b50849250505092915050565b60006129d38261320e565b808452602084019350836020820285016129ec856131eb565b60005b84811015612a25578383038852612a07838351612a99565b9250612a1282613249565b91506020880197506001810190506129ef565b508196508694505050505092915050565b612a3f81613276565b82525050565b612a4e816132d2565b82525050565b612a5d81613282565b82525050565b6000612a6e82613224565b808452612a828160208601602086016132f3565b612a8b81613326565b602085010191505092915050565b6000612aa482613219565b808452612ab88160208601602086016132f3565b612ac181613326565b602085010191505092915050565b6000600d82527f6f776e65725f61646472657373000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f6465736372697074696f6e0000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f70726963650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f74727565000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f61637469766500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f66616c73650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f70657454797065000000000000000000000000000000000000000000000000006020830152604082019050919050565b612cc78161328c565b82525050565b600060e0820190508181036000830152612ce7818a6129c8565b90508181036020830152612cfb81896129c8565b90508181036040830152612d0f81886129c8565b90508181036060830152612d23818761296d565b90508181036080830152612d3781866129c8565b905081810360a0830152612d4b81856129c8565b905081810360c0830152612d5f8184612912565b905098975050505050505050565b6000602082019050612d826000830184612a36565b92915050565b6000602082019050612d9d6000830184612a54565b92915050565b60006020820190508181036000830152612dbd8184612a63565b905092915050565b60006040820190508181036000830152612ddf8185612a63565b9050612dee6020830184612a45565b9392505050565b600060e0820190508181036000830152612e0f8189612a63565b90508181036020830152612e238188612a63565b9050612e326040830187612a54565b8181036060830152612e448186612a63565b90508181036080830152612e5781612bab565b905081810360a0830152612e6b8185612a63565b9050612e7a60c0830184612a54565b979650505050505050565b600060e0820190508181036000830152612e9f818a612a63565b90508181036020830152612eb38189612a63565b90508181036040830152612ec78188612a63565b9050612ed66060830187612a54565b8181036080830152612ee88186612a63565b905081810360a0830152612efc8185612a63565b9050612f0b60c0830184612903565b98975050505050505050565b60006020820190508181036000830152612f3081612acf565b9050919050565b60006040820190508181036000830152612f5081612acf565b9050612f5f6020830184612903565b92915050565b60006020820190508181036000830152612f7e81612b06565b9050919050565b60006020820190508181036000830152612f9e81612b3d565b9050919050565b60006020820190508181036000830152612fbe81612b74565b9050919050565b60006040820190508181036000830152612fde81612b74565b9050612fed6020830184612a54565b92915050565b6000602082019050818103600083015261300c81612be2565b9050919050565b6000604082019050818103600083015261302c81612be2565b9050818103602083015261303f81612bab565b9050919050565b6000604082019050818103600083015261305f81612be2565b9050818103602083015261307281612c50565b9050919050565b6000602082019050818103600083015261309281612c19565b9050919050565b600060208201905081810360008301526130b281612c87565b9050919050565b60006020820190506130ce6000830184612cbe565b92915050565b6000604051905081810181811067ffffffffffffffff821117156130f757600080fd5b8060405250919050565b600067ffffffffffffffff82111561311857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561314057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561316857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561319057600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156131bc57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006132c182613256565b9050919050565b6000819050919050565b60006132dd82613256565b9050919050565b82818337600083830152505050565b60005b838110156133115780820151818401526020810190506132f6565b83811115613320576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820991708a834b69f4fa7e2a47affa745a42aeefd69fd98447e9b11c5669a5b026b6c6578706572696d656e74616cf50037";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"modifyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"salesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"start\",\"type\":\"int256\"},{\"name\":\"end\",\"type\":\"int256\"}],\"name\":\"priceStatistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"buyPet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"active\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"petType\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"birthday\",\"type\":\"int256\"}],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getPetDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"avgPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSalesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPetList\",\"outputs\":[{\"name\":\"ids\",\"type\":\"string[]\"},{\"name\":\"name_list\",\"type\":\"string[]\"},{\"name\":\"type_list\",\"type\":\"string[]\"},{\"name\":\"price_list\",\"type\":\"int256[]\"},{\"name\":\"description_list\",\"type\":\"string[]\"},{\"name\":\"active_list\",\"type\":\"string[]\"},{\"name\":\"owner_address_list\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_petTalbeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_CANCEL = "cancel";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_CREATEUSER = "createUser";

    public static final String FUNC_MODIFYPRICE = "modifyPrice";

    public static final String FUNC_SALESCOUNT = "salesCount";

    public static final String FUNC_PRICESTATISTICS = "priceStatistics";

    public static final String FUNC_BUYPET = "buyPet";

    public static final String FUNC_ACTIVE = "active";

    public static final String FUNC_SALE = "sale";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_GETPETDETAIL = "getPetDetail";

    public static final String FUNC_AVGPRICE = "avgPrice";

    public static final String FUNC_GETSALESCOUNT = "getSalesCount";

    public static final String FUNC_GETPETLIST = "getPetList";

    public static final String FUNC_GETTOTALPRICE = "getTotalPrice";

    @Deprecated
    protected PetMarket(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PetMarket(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PetMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PetMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> cancel(String id) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cancel(String id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String cancelSeq(String id) {
        final Function function = new Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> getBalance() {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> createUser() {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createUser(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createUserSeq() {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> modifyPrice(String id, BigInteger price) {
        final Function function = new Function(
                FUNC_MODIFYPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void modifyPrice(String id, BigInteger price, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String modifyPriceSeq(String id, BigInteger price) {
        final Function function = new Function(
                FUNC_MODIFYPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> salesCount() {
        final Function function = new Function(FUNC_SALESCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> priceStatistics(BigInteger start, BigInteger end) {
        final Function function = new Function(FUNC_PRICESTATISTICS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(start), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(end)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> buyPet(String id) {
        final Function function = new Function(
                FUNC_BUYPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void buyPet(String id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BUYPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String buyPetSeq(String id) {
        final Function function = new Function(
                FUNC_BUYPET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> active(String id) {
        final Function function = new Function(
                FUNC_ACTIVE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void active(String id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACTIVE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String activeSeq(String id) {
        final Function function = new Function(
                FUNC_ACTIVE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> sale(String name, String petType, BigInteger price, String description, String url, BigInteger birthday) {
        final Function function = new Function(
                FUNC_SALE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(petType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(url), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(birthday)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sale(String name, String petType, BigInteger price, String description, String url, BigInteger birthday, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SALE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(petType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(url), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(birthday)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String saleSeq(String name, String petType, BigInteger price, String description, String url, BigInteger birthday) {
        final Function function = new Function(
                FUNC_SALE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(petType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(price), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(url), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(birthday)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Boolean> isAdmin() {
        final Function function = new Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple7<String, String, String, BigInteger, String, String, String>> getPetDetail(String id) {
        final Function function = new Function(FUNC_GETPETDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple7<String, String, String, BigInteger, String, String, String>>(
                new Callable<Tuple7<String, String, String, BigInteger, String, String, String>>() {
                    @Override
                    public Tuple7<String, String, String, BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, BigInteger, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> avgPrice() {
        final Function function = new Function(FUNC_AVGPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getSalesCount() {
        final Function function = new Function(FUNC_GETSALESCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>> getPetList() {
        final Function function = new Function(FUNC_GETPETLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>>(
                new Callable<Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<List<String>, List<String>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Int256>) results.get(3).getValue()), 
                                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                                convertToNative((List<Utf8String>) results.get(5).getValue()), 
                                convertToNative((List<Address>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteCall<BigInteger> getTotalPrice() {
        final Function function = new Function(FUNC_GETTOTALPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static PetMarket load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PetMarket(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PetMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PetMarket(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PetMarket load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PetMarket(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PetMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PetMarket(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PetMarket> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _petTalbeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_petTalbeAddress)));
        return deployRemoteCall(PetMarket.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PetMarket> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _petTalbeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_petTalbeAddress)));
        return deployRemoteCall(PetMarket.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PetMarket> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _petTalbeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_petTalbeAddress)));
        return deployRemoteCall(PetMarket.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PetMarket> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _petTalbeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_petTalbeAddress)));
        return deployRemoteCall(PetMarket.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
